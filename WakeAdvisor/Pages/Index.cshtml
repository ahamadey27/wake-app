@page
@model IndexModel
@{
    ViewData["Title"] = "Home page";
}

<div class="text-center">
    <h1 class="display-4">Hudson River Southbound Freighter Wake Advisor</h1>
    <p>Select a date to view low tide windows and freighter predictions for wake surfing near Kingston, NY.</p>

    <form method="post">
        <div class="form-group">
            <label>Select Date:</label><br />
            <input type="radio" id="today" name="SelectedDay" value="today" @(Model.SelectedDay == "today" ? "checked" : "") />
            <label for="today">Today (@DateTime.Now.ToString("MMMM dd, yyyy"))</label><br />
            <input type="radio" id="tomorrow" name="SelectedDay" value="tomorrow" @(Model.SelectedDay == "tomorrow" ? "checked" : "") />
            <label for="tomorrow">Tomorrow (@DateTime.Now.AddDays(1).ToString("MMMM dd, yyyy"))</label>
        </div>
        <button type="submit" class="btn btn-primary">Get Predictions</button>
    </form>

    @if (Model.FreighterInfos != null && Model.FreighterInfos.Count > 0)
    {
        <h2>Southbound Freighters Approaching Kingston</h2>
        <table class="table">
            <thead>
                <tr>
                    <th>Name</th>
                    <th>MMSI</th>
                    <th>Speed (knots)</th>
                    <th>Distance (NM)</th>
                    <th>Projected Tide (ft)</th>
                    <th>ETA at Kingston</th>
                </tr>
            </thead>
            <tbody>
            @foreach (var info in Model.FreighterInfos)
            {
                <tr>
                    <td>@info.Name</td>
                    <td>@info.MMSI</td>
                    <td>@info.CurrentSOG</td>
                    <td>@info.DistanceToKingstonNM.ToString("F2")</td>
                    <td>
                        @{
                            double? projectedTide = null;
                            if (Model.AllTidePredictions != null)
                            {
                                var formats = new[] {
                                    "yyyy-MM-dd HH:mm",
                                    "yyyy-MM-dd HH:mm:ss",
                                    "yyyy-MM-dd'T'HH:mm",
                                    "yyyy-MM-dd'T'HH:mm:ss",
                                    "yyyy-MM-dd HH:mm zzz",
                                    "yyyy-MM-dd'T'HH:mmK",
                                    "yyyy-MM-dd'T'HH:mm:ssK"
                                };
                                var closest = Model.AllTidePredictions
                                    .Select(tp => new {
                                        Prediction = tp,
                                        Time = DateTime.TryParseExact(tp.Time, formats, System.Globalization.CultureInfo.InvariantCulture, System.Globalization.DateTimeStyles.None, out var t) ? t : (DateTime?)null
                                    })
                                    .Where(x => x.Time.HasValue)
                                    .OrderBy(x => Math.Abs((x.Time.Value - info.ETAAtKingston).TotalMinutes))
                                    .FirstOrDefault();
                                if (closest != null && double.TryParse(closest.Prediction.Value, out var tideVal))
                                {
                                    projectedTide = tideVal;
                                }
                            }
                        }
                        @(projectedTide.HasValue ? projectedTide.Value.ToString("F2") : "N/A")
                    </td>
                    <td>@info.ETAAtKingston.ToString("g")</td>
                </tr>
            }
            </tbody>
        </table>
    }
    else if (Model.FreighterInfos != null)
    {
        <p>No southbound freighters predicted for the selected date and time window.</p>
    }
</div>